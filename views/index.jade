extends layout

block content
	section
		header
			h1 Passwordless
			p Express middleware for authentication through one-time tokens via email, text, ... 
		section
			if error
				p= error
			if !user
				form(action='/account/sendtoken', method='POST')
					p Curious how it works? Test our demo!
					p We will only use your email to send out the token. Still don't want to give your personal email? Simply use a  
						a(href='http://mailinator.com/') disposable address
					label(for='email') Email
					if validation && validation.user
						label(for='email') #{validation.user.msg}
					input(id='email', name='user', type='email', placeholder='email@example.com', 
						maxlength=200, minlength=1,
						value='#{ (validation && validation.user && validation.user.value) || "" }')
					input(type='submit', value='Login or Register')
		section
			header
				p Passwords are broken. Inspired by 
					a(href='http://twitter.com/ninjudd') Justin Balthrop's
					|  
					cite 
						a(href='https://medium.com/@ninjudd/passwords-are-obsolete-9ed56d483eb') Passwords are Obsolete
					|  Passwordless delivers an alternative that is faster for you as a developer, 
					| better for your users, and more secure
			article
				h2 Faster for you
				p One form and one text field. That's all the frontend you need to have your user 
					|registration and authentication solved. No need for separate registration, 
					| login, and lost password pages. If you need more user details, Passwordless 
					| will scale easily.
				p If you only have a handful of users (e.g. for your own blog) you can even skip 
					| the user database and just hardcode the relevant email addresses without
					| opening you up to any security risks.
			article
				h2 Better for your users
				p Type in an email address, click on the provided link, and your users are ready to go. 
					| No passwords to invent or to remember. Exactly the same when a user returns 
					| to your site. This eliminates a big hurdle to get them on board.
			article
				h2 Better security
				p '12345', 'password', ... Inventing great passwords is hard. So many users still 
					a(href='http://www.wired.com/2013/12/web-semantics-the-ten-thousand-worst-passwords/') 
						| don't do it
					| . Worse: the same passwords are repeated across several websites, so if one 
					| site is broken all the user's accounts are broken simultaneously.
				p In addition, rather than splitting your attention on both the login page and the 
					| lost password page, you can focus your security-minded energy on just one path.
				p The used tokens are extremely 
					a(href='http://en.wikipedia.org/wiki/Universally_unique_identifier') hard to guess
					| , are only valid for a limited time and can be reset at any time without having 
					| to ask your uses for creating a new password.
			article
				h2 Flexible
				p Deliver your tokens via email, text messages (SMS), or smoke signs. You can embed 
					a(href='http://sendgrid.com/') Sendgrid
					| , 
					a(href='https://github.com/eleith/emailjs') emailjs
					| , 
					a(href='https://www.twilio.com/') Twilio
					| , or any other framework to get the token to your user.
				p While having sensible defaults, you can tweak almost anything. Redirects, error 
					| messages, field names, ... Check out all the details in the 
					a(href='/customizing') deep dive section
					|  or have a look at the 
					a(href='/api') API
					| .

